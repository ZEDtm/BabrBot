import logging
import re
from datetime import datetime
from bson import ObjectId

from admin_handlers import archive_handlers
from config import bot
from database.collection import events, archive, users, payments
from modules.list_collection import ListEvents, ListUsersInEvent
from modules.bot_states import AdminEditEvent, UsersInEvent
from modules.bot_calendar_module import SelectDays, NewEventCalendar, SelectTime, AdminEventCalendar
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from modules.logger import send_log



async def list_events_public(callback: types.CallbackQuery, state: FSMContext):
    list_collection = await ListEvents().start_collection(events.find())
    await callback.message.edit_text('‚ú® –°–ø–∏—Å–æ–∫: –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', reply_markup=list_collection)


async def list_events_select(callback: types.CallbackQuery, state: FSMContext):
    select, event_id, current_page = await ListEvents().processing_selection(callback, callback.data, events.find())
    if event_id:
        await event_handle(callback, state, event_id, current_page=current_page)


async def admin_calendar(callback: types.CallbackQuery, state: FSMContext):
    calendar = await AdminEventCalendar(events.find(), archive.find()).start_calendar()
    await callback.message.edit_text('üóì –ö–∞–ª–µ–Ω–¥–∞—Ä—å: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: \n\nüü¢ - –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ\nüü° - –ß–µ—Ä–Ω–æ–≤–∏–∫\nüî¥ - –ê—Ä—Ö–∏–≤', reply_markup=calendar)


async def admin_calendar_select(callback: types.CallbackQuery, state: FSMContext):
    event, date, act_id = await AdminEventCalendar(events.find(), archive.find()).process_selection(callback,
                                                                                                    callback.data)
    if act_id and event:
        await event_handle(callback, state, act_id, date=date)
    elif act_id:
        await archive_handlers.archive_handle(callback, state, archive_id=act_id, date=date)


async def event_handle(callback: types.CallbackQuery, state: FSMContext, event_id: str, current_page: int = None,
                       date: dict = None):
    event = events.find_one({'_id': ObjectId(event_id)})
    keyboard = InlineKeyboardMarkup()
    if event['public']:
        keyboard.add(InlineKeyboardButton(text='‚ùé –û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f"cancel-event%{event_id}"))
    else:
        keyboard.add(InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å', callback_data=f"public-event%{event_id}"))
    keyboard.add(InlineKeyboardButton(text='‚úè –ù–∞–∑–≤–∞–Ω–∏–µ', callback_data=f"event-edit-name%{event_id}"),
                 InlineKeyboardButton(text='‚úè –û–ø–∏—Å–∞–Ω–∏–µ', callback_data=f"event-edit-description%{event_id}"))
    keyboard.add(InlineKeyboardButton(text='‚úè –°—Ç–æ–∏–º–æ—Å—Ç—å', callback_data=f"event-edit-price%{event_id}"),
                 InlineKeyboardButton(text='‚úè –£—Å–ª—É–≥–∏', callback_data=f"event-edit-services%{event_id}"))
    keyboard.add(InlineKeyboardButton(text='‚úè –í—Ä–µ–º—è, –¥–∞—Ç–∞, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', callback_data=f"event-edit-date%{event_id}"))
    keyboard.add(InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å', callback_data=f"event-delete%{event_id}"),
                 InlineKeyboardButton(text='üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏', callback_data=f"event-users%{event_id}"),)
    if current_page:
        keyboard.add(InlineKeyboardButton(text='üè† –í –ú–µ–Ω—é', callback_data=f"menu"),
                     InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=f"events_list-n-{current_page}"))
    else:
        keyboard.add(InlineKeyboardButton(text='üè† –í –ú–µ–Ω—é', callback_data=f"menu"),
                     InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥',
                                          callback_data=f"admin_event_calendar:CURRENT:{event['year']}:{event['month']}:{event['day']}"))

    text = f"üìÜ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime(int(event['year']), int(event['month']), int(event['day']), int(event['hour']), int(event['minute']))}\n"
    text += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ:\n {event['name']}\n\n" \
            f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ:\n{event['description']}\n\n" \
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏—è: {event['price']}‚ÇΩ\n" \
            f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {event['duration']} –¥–Ω\n" \
            f"üìë –£—Å–ª—É–≥–∏:\n"
    for service, price in zip(event['service_description'], event['service_price']):
        text += f" - {service}: {price}‚ÇΩ\n"
    text += f"\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(event['users'])}"
    await callback.message.edit_text(text, reply_markup=keyboard)


async def publication_event(callback: types.CallbackQuery, state: FSMContext):
    event_id = callback.data.split(sep='%')[1]
    event = events.find_one({'_id': ObjectId(event_id)})
    events.update_one(event, {'$set': {'public': True}})
    count_send = 0
    count_blocked = 0

    for user in users.find():
        await callback.message.edit_text(f"üì§ –†–∞—Å—Å—ã–ª–∫–∞:\n üëç –£—Å–ø–µ—à–Ω–æ: {count_send}\n üëé –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {count_blocked}")
        try:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton(text='üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
                                              callback_data=f"event_calendar:event:{event['year']}:{event['month']}:{event['day']}:{event_id}"))
            await bot.send_message(user['user_id'],
                                   f"üéâ –í—ã –≥–æ—Ç–æ–≤—ã –∫ —É—á–∞—Å—Ç–∏—é –≤ –Ω–æ–≤–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ - {event['name']}?\nüëá –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å!",
                                   reply_markup=keyboard)
            count_send += 1
        except:
            count_blocked += 1
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'),
                 InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥',
                                      callback_data=f"admin_event_calendar:event:{event['year']}:{event['month']}:{event['day']}:{event_id}"))
    await callback.message.edit_reply_markup(reply_markup=keyboard)

    await send_log(f"–ß–µ—Ä–Ω–æ–≤–∏–∫[{event['name']}] -> –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")


async def event_cancel(callback: types.CallbackQuery, state: FSMContext):
    event_id = callback.data.split(sep='%')[1]
    event = events.find_one(ObjectId(event_id))
    events.update_one(event, {'$set': {'public': False}})

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'),
                 InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=f"admin_event_calendar:event:{event['year']}:{event['month']}:{event['day']}:{event_id}"))
    await callback.message.edit_text('üòñ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard)

    await send_log(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ[{event['name']}] -> –ß–µ—Ä–Ω–æ–≤–∏–∫")


async def event_edit_name(callback: types.CallbackQuery, state: FSMContext):
    event_id = callback.data.split(sep='%')[1]
    event = events.find_one(ObjectId(event_id))

    await AdminEditEvent.event_name.set()
    async with state.proxy() as data:
        data['event_id'] = event_id
        data['callback_data'] = f"admin_event_calendar:event:{event['year']}:{event['month']}:{event['day']}:{event_id}"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'),
                 InlineKeyboardButton('‚Ü© –ù–∞–∑–∞–¥',
                                      callback_data=f"admin_event_calendar:event:{event['year']}:{event['month']}:{event['day']}:{event_id}"))

    await callback.message.edit_text(f"‚ú® –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event['name']}\n\n‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", reply_markup=keyboard)


async def event_edit_name_set(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    async with state.proxy() as data:
        event = events.find_one(ObjectId(data['event_id']))
        events.update_one(event, {'$set': {'name': message.text}})
        keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'),
                     InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=data['callback_data']))
    await message.answer('üìù –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard)

    await send_log(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ[{event['name']}]: –ù–∞–∑–≤–∞–Ω–∏–µ <- {message.text}")


async def event_edit_description(callback: types.CallbackQuery, state: FSMContext):
    event_id = callback.data.split(sep='%')[1]
    event = events.find_one(ObjectId(event_id))

    await AdminEditEvent.event_description.set()
    async with state.proxy() as data:
        data['event_id'] = event_id
        data['callback_data'] = f"admin_event_calendar:event:{event['year']}:{event['month']}:{event['day']}:{event_id}"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'),
                 InlineKeyboardButton('‚Ü© –ù–∞–∑–∞–¥',
                                      callback_data=f"admin_event_calendar:event:{event['year']}:{event['month']}:{event['day']}:{event_id}"))

    await callback.message.edit_text(f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ\n {event['description']}\n\n‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
                                     reply_markup=keyboard)


async def event_edit_description_set(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    async with state.proxy() as data:
        event = events.find_one(ObjectId(data['event_id']))
        events.update_one(event, {'$set': {'description': message.text}})
        keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'),
                     InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=data['callback_data']))
    await message.answer('üìù –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard)

    await send_log(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ[{event['name']}]: –û–ø–∏—Å–∞–Ω–∏–µ <- {message.text}")


async def event_edit_price(callback: types.CallbackQuery, state: FSMContext):
    event_id = callback.data.split(sep='%')[1]
    event = events.find_one(ObjectId(event_id))

    await AdminEditEvent.event_price.set()
    async with state.proxy() as data:
        data['event_id'] = event_id
        data['callback_data'] = f"admin_event_calendar:event:{event['year']}:{event['month']}:{event['day']}:{event_id}"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'),
                 InlineKeyboardButton('‚Ü© –ù–∞–∑–∞–¥',
                                      callback_data=f"admin_event_calendar:event:{event['year']}:{event['month']}:{event['day']}:{event_id}"))

    await callback.message.edit_text(
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å\n {event['price']}\n\n‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å:",
        reply_markup=keyboard)


async def event_edit_price_set(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    async with state.proxy() as data:
        event = events.find_one(ObjectId(data['event_id']))
        keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'),
                     InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=data['callback_data']))
        if not re.match(r'^\d+$', message.text):
            await AdminEditEvent.event_price.set()
            await message.answer('‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å:', reply_markup=keyboard)
            return
    events.update_one(event, {'$set': {'price': int(message.text)}})
    await message.answer('üìù –°—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞', reply_markup=keyboard)

    await send_log(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ[{event['name']}]: –°—Ç–æ–∏–º–æ—Å—Ç—å <- {message.text}")


async def event_edit_services(callback: types.CallbackQuery, state: FSMContext):
    event_id = callback.data.split(sep='%')[1]
    event = events.find_one(ObjectId(event_id))
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å', callback_data=f"event-edit-add-service%{event_id}"))
    await AdminEditEvent.event_services.set()
    async with state.proxy() as data:
        data['callback_data'] = f"admin_event_calendar:event:{event['year']}:{event['month']}:{event['day']}:{event_id}"
        for service, price in zip(event['service_description'], event['service_price']):
            keyboard.add(InlineKeyboardButton(text=f"{service}: {price}",
                                              callback_data=f"event-edit-service%{event_id}%{event['service_description'].index(service)}"))

    keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'),
                 InlineKeyboardButton('‚Ü© –ù–∞–∑–∞–¥',
                                      callback_data=f"admin_event_calendar:event:{event['year']}:{event['month']}:{event['day']}:{event_id}"))

    await callback.message.edit_text(f"üëá –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


async def event_edit_service_description(callback: types.CallbackQuery, state: FSMContext):
    event_id = callback.data.split(sep='%')[1]
    service_index = callback.data.split(sep='%')[2]

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å', callback_data=f"event-delete-service%{event_id}%{service_index}"))
    async with state.proxy() as data:
        keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'),
                     InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=data['callback_data']))
        data['event_id'] = event_id
        data['service_index'] = service_index

    await AdminEditEvent.event_service_description.set()
    await callback.message.edit_text('‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:', reply_markup=keyboard)


async def event_edit_service_description_set(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    async with state.proxy() as data:
        keyboard.add(
            InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å',
                                 callback_data=f"event-delete-service%{data['event_id']}%{data['service_index']}"))
        keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'),
                     InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=data['callback_data']))
        events.update_one({'_id': ObjectId(data['event_id'])},
                          {'$set': {f'service_description.{data["service_index"]}': message.text}})
        await send_log(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ[{data['event_id']}]: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ <- {message.text}")
    await AdminEditEvent.event_service_price.set()
    await message.answer('‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏:', reply_markup=keyboard)


async def event_edit_service_price_set(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    async with state.proxy() as data:
        keyboard.add(InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å',
                                          callback_data=f"event-delete-service%{data['event_id']}%{data['service_index']}"))
        keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'),
                     InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=data['callback_data']))
        if not re.match(r'^\d+$', message.text):
            await AdminEditEvent.event_service_price.set()
            await message.answer('‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏:', reply_markup=keyboard)
            return
        events.update_one({'_id': ObjectId(data['event_id'])},
                          {'$set': {f'service_price.{data["service_index"]}': message.text}})
        await send_log(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ[{data['event_id']}]: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å <- {message.text}")
    await message.answer('üìù –£—Å–ª—É–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∞', reply_markup=keyboard)


async def event_edit_service_add(callback: types.CallbackQuery, state: FSMContext):
    event_id = callback.data.split(sep='%')[1]
    keyboard = InlineKeyboardMarkup()
    async with state.proxy() as data:
        data['event_id'] = event_id
        keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'),
                     InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=data['callback_data']))
    await AdminEditEvent.event_new_service_description.set()
    await callback.message.edit_text('‚úè –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:', reply_markup=keyboard)


async def event_edit_service_add_description(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    async with state.proxy() as data:
        data['service_description'] = message.text
        keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'),
                     InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=data['callback_data']))
    await AdminEditEvent.event_new_service_price.set()
    await message.answer('‚úè –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏:', reply_markup=keyboard)


async def event_edit_service_add_price(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    async with state.proxy() as data:
        keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'),
                     InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=data['callback_data']))
        if not re.match(r'^\d+$', message.text):
            await AdminEditEvent.event_new_service_price.set()
            await message.answer('‚úè –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏:', reply_markup=keyboard)
            return
        events.update_one({'_id': ObjectId(data['event_id'])},
                          {'$push': {'service_description': data['service_description']}})
        events.update_one({'_id': ObjectId(data['event_id'])}, {'$push': {'service_price': message.text}})

        await send_log(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ[{data['event_id']}]: –£—Å–ª—É–≥–∏ <- {data['service_description']}")
    await message.answer('üìù –£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=keyboard)


async def event_edit_service_delete(callback: types.CallbackQuery, state: FSMContext):
    event_id = callback.data.split(sep='%')[1]
    service_index = callback.data.split(sep='%')[2]
    event = events.find_one(ObjectId(event_id))
    keyboard = InlineKeyboardMarkup()
    async with state.proxy() as data:
        keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'),
                     InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=data['callback_data']))
    events.update_one({'_id': ObjectId(event_id)},
                      {'$pull': {'service_description': event['service_description'][int(service_index)]}})
    events.update_one({'_id': ObjectId(event_id)},
                      {'$pull': {'service_price': event['service_price'][int(service_index)]}})
    await send_log(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ[{event_id}]: –£—Å–ª—É–≥–∞[{event['service_description'][int(service_index)]}] -> –£–¥–∞–ª–µ–Ω–∞")
    await callback.message.edit_text('üóë –£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞', reply_markup=keyboard)


async def event_edit_time(callback: types.CallbackQuery, state: FSMContext):
    event_id = callback.data.split(sep='%')[1]
    event = events.find_one(ObjectId(event_id))

    await AdminEditEvent.event_date.set()
    async with state.proxy() as data:
        data['event_id'] = event_id
        data['callback_data'] = f"admin_event_calendar:event:{event['year']}:{event['month']}:{event['day']}:{event_id}"

        keyboard = await SelectTime().start_time(event['hour'], event['minute'])
        keyboard.add(InlineKeyboardButton('üè† –ú–µ–Ω—é', callback_data='menu'),
                     InlineKeyboardButton('‚Ü© –ù–∞–∑–∞–¥',
                                          callback_data=f"admin_event_calendar:event:{event['year']}:{event['month']}:{event['day']}:{event_id}"))
    await callback.message.edit_text('‚åö –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è', reply_markup=keyboard)


async def event_edit_duration(callback: types.CallbackQuery, state: FSMContext):
    select, time = await SelectTime().process_selection(callback, callback.data)
    if select:
        async with state.proxy() as data:
            event = events.find_one(ObjectId(data['event_id']))
            keyboard = await SelectDays().start_days(day=event['duration'], edit=True)
            keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'),
                         InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=data['callback_data']))
        events.update_one(event, {'$set': {'hour': time['hour'], 'minute': time['minute']}})

        await callback.message.edit_text('‚åö –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n\n‚è± –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', reply_markup=keyboard)

        await send_log(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ[{event['name']}]: –í—Ä–µ–º—è <- {time['hour']}:{time['minute']}")


async def event_edit_date(callback: types.CallbackQuery, state: FSMContext):
    select, day = await SelectDays().process_selection(callback, callback.data)
    if select:
        async with state.proxy() as data:
            event = events.find_one(ObjectId(data['event_id']))
            keyboard = await NewEventCalendar(events.find()).start_calendar()
            keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'),
                         InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=data['callback_data']))

        events.update_one(event, {'$set': {'duration': day}})

        await callback.message.edit_text('‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\nüóì –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É', reply_markup=keyboard)

        await send_log(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ[{event['name']}]: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å <- {day}")


async def event_edit_date_set(callback: types.CallbackQuery, state: FSMContext):
    select, date = await NewEventCalendar(events.find()).process_selection(callback, callback.data)
    if select:
        async with state.proxy() as data:
            event = events.find_one(ObjectId(data['event_id']))
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'),
                         InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=data['callback_data']))

        events.update_one(event, {'$set': {'year': date['year'], 'month': date['month'], 'day': date['day']}})

        await callback.message.edit_text('üóì –î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', reply_markup=keyboard)

        await send_log(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ[{event['name']}]: –î–∞—Ç–∞ <- {date['day']}.{date['month']}.{date['year']}")


async def event_users(callback: types.CallbackQuery, state: FSMContext):
    event_id = callback.data.split(sep='%')[1]
    event = events.find_one({'_id': ObjectId(event_id)})
    users_data = []
    for user_id in event['users']:
        users_data.append(users.find_one({'user_id': user_id}))
    callback_data = f"admin_event_calendar:event:{event['year']}:{event['month']}:{event['day']}:{event_id}"
    keyboard = await ListUsersInEvent().start_collection(users_data, callback_data)
    await UsersInEvent.list.set()
    async with state.proxy() as data:
        data['callback_data'] = callback_data
        data['event_id'] = event_id
    await callback.message.edit_text('üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', reply_markup=keyboard)


async def event_users_select(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        event_id = data['event_id']
        callback_data = data['callback_data']
        event = events.find_one({'_id': ObjectId(event_id)})
        users_data = []
        for user in event['users']:
            users_data.append(users.find_one({'user_id': user}))
    select, user_db_id, current_page = await ListUsersInEvent().processing_selection(callback, callback.data, users_data, callback_data)
    if select:
        await event_user_select(callback, state, user_db_id, current_page)


async def event_user_select(callback: types.CallbackQuery, state: FSMContext, user_db_id, current_page):
    async with state.proxy() as data:
        event_id = data['event_id']
    user = users.find_one({'_id': ObjectId(user_db_id)})
    payment = payments.find_one({'user_id': user['user_id'], 'binding': event_id})
    text = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n {user['full_name']}\n\n" \
           f"üìë –í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:\n"
    for info in payment['info']:
        text += f"- {info['label']}: {info['amount']}‚ÇΩ"
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text='üìå –û—Ç–∫—Ä–µ–ø–∏—Ç—å', callback_data=f"user-del-event%{user['user_id']}%{event_id}%{current_page}"))
    keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'),
                 InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=f'event_users-n-{current_page}'))
    await callback.message.edit_text(text, reply_markup=keyboard)


async def user_del_event(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split(sep='%')[1])
    event_id = callback.data.split(sep='%')[2]
    current_page = callback.data.split(sep='%')[3]
    payments.delete_one({'user_id': user_id, 'binding': event_id})
    events.update_one({'_id': ObjectId(event_id)}, {'$pull': {'users': user_id}})
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'),
                 InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=f"event_users-n-{current_page}"))

    await callback.message.edit_text('üìå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω', reply_markup=keyboard)
    await send_log(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ[{event_id}]:–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å[{user_id}] -> –û—Ç–∫—Ä–µ–ø–∏—Ç—å")


async def notify_users(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['event_id'] = callback.data.split(sep='%')[1]
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('üè† –í –º–µ–Ω—é', callback_data='menu'),
                     InlineKeyboardButton('‚Ü© –ù–∞–∑–∞–¥', callback_data=data['callback_data']))
    await callback.message.edit_text('üì© –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', reply_markup=keyboard)


async def notify_users_send(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        event = events.find_one({'_id': ObjectId(data['event_id'])})
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('üè† –í –º–µ–Ω—é', callback_data='menu'),
                     InlineKeyboardButton('‚Ü© –ù–∞–∑–∞–¥', callback_data=data['callback_data']))
    send = 0
    blocked = 0
    for user in event['users']:
        try:
            await bot.send_message(user, f"üì¢ –£–≤–∞–∂–∞–µ–º—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!\n {event['name']}\n\n" + message.text)
            send += 1
        except:
            blocked += 1
    await send_log(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ[{event['name']}]:–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ -> [–†–∞—Å—Å—ã–ª–∫–∞] <- {message.text}")
    await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞:\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {send}\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:{blocked}', reply_markup=keyboard)


async def event_delete(callback: types.CallbackQuery, state: FSMContext):
    event_id = callback.data.split(sep='%')[1]
    events.delete_one({'_id': ObjectId(event_id)})
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('üè† –í –º–µ–Ω—é', callback_data='menu'))
    await callback.message.edit_text('üòñ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ')
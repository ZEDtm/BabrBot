import datetime
import re

from bson import ObjectId
from datetime import datetime


import admin_handlers.events_handlers
from config import bot, DIR
from database.collection import events, archive
from database.models import Event
from modules.bot_states import AdminNewEvent, AdminArchive
from modules.list_collection import ListArchive
from modules.logger import send_log

from aiogram import executor, types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from handlers import main_handlers, registration_handlers, profile_handlers, calendar_handlers, residents_handlers


async def archive_list(callback: types.CallbackQuery, state: FSMContext):
    await AdminArchive.list.set()
    keyboard = await ListArchive().start_collection(archive.find())
    await callback.message.edit_text('üóÑ –ê—Ä—Ö–∏–≤: —Å–ø–∏—Å–æ–∫', reply_markup=keyboard)


async def archive_list_select(callback: types.CallbackQuery, state: FSMContext):
    select, archive_id, current_page = await ListArchive().processing_selection(callback, callback.data, archive.find())
    if archive_id:
        await archive_handle(callback, state, archive_id=archive_id, current_page=current_page)


async def archive_handle(callback: types.CallbackQuery, state: FSMContext, archive_id: str, current_page: int = None, date: dict = None):
    await AdminArchive.list.set()
    arch = archive.find_one({'_id': ObjectId(archive_id)})

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text='üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', callback_data=f"archive-add-images%{archive_id}"))
    keyboard.add(InlineKeyboardButton(text='üé• –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ', callback_data=f"archive-add-video%{archive_id}"))
    keyboard.add(InlineKeyboardButton(text='‚òÅ –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É', callback_data=f"archive-add-link%{archive_id}"))

    if current_page:
        async with state.proxy() as data:
            data['callback_data'] = f"archive_list-y-{archive_id}-{current_page}"
        keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data=f"menu"),
                     InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=f"archive_list-n-{current_page}"))
    if date:
        async with state.proxy() as data:
            data['callback_data'] = f"admin_event_calendar:archive:{date['year']}:{date['month']}:{date['day']}:{archive_id}"
        keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data=f"menu"),
                     InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=f"admin_event_calendar:CURRENT:{date['year']}:{date['month']}:{date['day']}"))

    date_format = datetime(int(arch['year']), int(arch['month']), int(arch['day'])).strftime('%d.%m.%Y')
    text = f"üìÜ –î–∞—Ç–∞: {date_format}\nüóÑ –ù–∞–∑–≤–∞–Ω–∏–µ: {arch['name']}\n\n" \
           f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ:\n{arch['description']}\n"
    await callback.message.edit_text(text, reply_markup=keyboard)


async def archive_add_images(callback: types.CallbackQuery, state: FSMContext):
    await AdminArchive.add_images.set()
    keyboard = InlineKeyboardMarkup()

    async with state.proxy() as data:
        data['archive_id'] = callback.data.split(sep='%')[1]

        keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data=f"menu"),
                     InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=data['callback_data']))

    await callback.message.edit_text('üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:', reply_markup=keyboard)


async def archive_add_images_download(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup()

    photo_sizes = message.photo
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    last_photo = photo_sizes[-1]
    async with state.proxy() as data:
        keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data=f"menu"),
                     InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=data['callback_data']))

        file = await bot.get_file(last_photo.file_id)
        file_name = f'{last_photo.file_id}.jpg'
        await bot.download_file(file.file_path, destination=f"{DIR}/archive/{data['archive_id']}/images/{file_name}")
    await message.reply('üíæ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', reply_markup=keyboard)


async def archive_add_video(callback: types.CallbackQuery, state: FSMContext):
    await AdminArchive.add_video.set()
    keyboard = InlineKeyboardMarkup()

    async with state.proxy() as data:
        data['archive_id'] = callback.data.split(sep='%')[1]

        keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data=f"menu"),
                     InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=data['callback_data']))

    await callback.message.edit_text('üé• –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ:', reply_markup=keyboard)


async def archive_add_video_download(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup()

    async with state.proxy() as data:
        keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data=f"menu"),
                     InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=data['callback_data']))

    file_id = message.video.file_id
    file = await bot.get_file(file_id)
    await bot.download_file(file.file_path, f"{DIR}/archive/{data['archive_id']}/video/{file_id}.mp4")
    await message.reply('üíæ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', reply_markup=keyboard)


async def archive_add_link(callback: types.CallbackQuery, state: FSMContext):
    await AdminArchive.add_link.set()
    keyboard = InlineKeyboardMarkup()

    async with state.proxy() as data:
        data['archive_id'] = callback.data.split(sep='%')[1]
        print(data['callback_data'])

        keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data=f"menu"),
                     InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=data['callback_data']))

    await callback.message.edit_text('‚òÅ –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É:', reply_markup=keyboard)


async def archive_add_link_set(message: types.Message, state: FSMContext):
    url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
    if not re.match(url_pattern, message.text):
        await AdminArchive.add_link.set()
        await message.answer('–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://.')
    keyboard = InlineKeyboardMarkup()

    async with state.proxy() as data:
        keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data=f"menu"),
                     InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=data['callback_data']))

        archive.update_one({'_id': ObjectId(data['archive_id'])},  {"$set": {'link': message.text}})
    await AdminArchive.list.set()
    await message.answer('üíæ –°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', reply_markup=keyboard)
import logging
import re
from datetime import datetime
from bson import ObjectId

from admin_handlers import archive_handlers
from config import dp, bot
from database.collection import events, archive, users
from database.models import Event
from modules.list_collection import ListEvents
from modules.bot_states import AdminNewEvent, AdminEditEvent
from modules.bot_calendar_module import SelectDays, NewEventCalendar, SelectTime, AdminEventCalendar
from aiogram import executor, types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from handlers import main_handlers, registration_handlers, profile_handlers, calendar_handlers, residents_handlers
from modules.logger import send_log

logging.basicConfig(level=logging.INFO)


async def list_events_public(callback: types.CallbackQuery, state: FSMContext):
    list_collection = await ListEvents().start_collection(events.find())
    await callback.message.edit_text('–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', reply_markup=list_collection)


async def list_events_select(callback: types.CallbackQuery, state: FSMContext):
    select, event_id, current_page = await ListEvents().processing_selection(callback, callback.data, events.find())
    if event_id:
        await event_handle(callback, state, event_id, current_page=current_page)


async def admin_calendar(callback: types.CallbackQuery, state: FSMContext):
    calendar = await AdminEventCalendar(events.find(), archive.find()).start_calendar()
    await callback.message.edit_text('–ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', reply_markup=calendar)


async def admin_calendar_select(callback: types.CallbackQuery, state: FSMContext):
    event, date, act_id = await AdminEventCalendar(events.find(), archive.find()).process_selection(callback, callback.data)
    if act_id and event:
        await event_handle(callback, state, act_id, date=date)
    elif act_id:
        await archive_handlers.archive_handle(callback, state, archive_id=act_id, date=date)


async def event_handle(callback: types.CallbackQuery, state: FSMContext, event_id: str, current_page: int = None, date: dict = None):
    event = events.find_one({'_id': ObjectId(event_id)})
    keyboard = InlineKeyboardMarkup(row_width=1)
    if event['public']:
        keyboard.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f"public-event-{event_id}"))
    else:
        keyboard.add(InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å', callback_data=f"public-event%{event_id}"))
    keyboard.add(InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data=f"event-edit-name%{event_id}"),
                 InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data=f"event-edit-description%{event_id}"),
                 InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', callback_data=f"event-edit-price%{event_id}"),
                 InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥–∏', callback_data=f"event-edit-services%{event_id}"),
                 InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', callback_data=f"event-edit-date%{event_id}"))
    if current_page:
        keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f"events_list-n-{current_page}"))
    if date:
        keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f"admin_event_calendar:CURRENT:{date['year']}:{date['month']}:{date['day']}"))
    if not event['public']:
        keyboard.add(InlineKeyboardButton(text='–í —á–µ—Ä–Ω–æ–≤–∏–∫', callback_data=f"menu"))

    text = f"[–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è]: {datetime(int(event['year']), int(event['month']), int(event['day']), int(event['hour']), int(event['minute']))}\n"
    text += f"[–ù–∞–∑–≤–∞–Ω–∏–µ]: {event['name']}\n" \
            f"[–û–ø–∏—Å–∞–Ω–∏–µ]:\n{event['description']}\n" \
            f"[–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏—è]: {event['price']}—Ä—É–±.\n" \
            f"[–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å]: {event['duration']}–¥–Ω.\n" \
            f"[–£—Å–ª—É–≥–∏]:\n"
    for service, price in zip(event['service_description'], event['service_price']):
        text += f" - {service}: {price}—Ä—É–±.\n"
    text += f"[–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤]: {len(event['users'])} (—Ä–µ–∑–∏–¥.)"
    await callback.message.edit_text(text, reply_markup=keyboard)


async def publication_event(callback: types.CallbackQuery, state: FSMContext):
    event_id = callback.data.split(sep='%')[1]
    event = events.find_one({'_id': ObjectId(event_id)})
    events.update_one(event, {'$set': {'public': True}})
    count_send = 0
    count_blocked = 0

    for user in users.find():
        await callback.message.edit_text(f"–†–∞—Å—Å—ã–ª–∫–∞:\n–£—Å–ø–µ—à–Ω–æ: {count_send}\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {count_blocked}")
        try:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton(text='üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', callback_data=f"event_calendar:event:{event['year']}:{event['month']}:{event['day']}:{event_id}"))
            await bot.send_message(user['user_id'], f"üéâ –í—ã –≥–æ—Ç–æ–≤—ã –∫ —É—á–∞—Å—Ç–∏—é –≤ –Ω–æ–≤–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ - {event['name']}?\nüëá –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å!", reply_markup=keyboard)
            count_send += 1
        except:
            count_blocked += 1
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='menu'),
                 InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f"admin_event_calendar:event:{event['year']}:{event['month']}:{event['day']}:{event_id}"))
    await callback.message.edit_reply_markup(reply_markup=keyboard)

    await send_log(f"–ß–µ—Ä–Ω–æ–≤–∏–∫[{event['name']}] -> –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")


async def event_edit_name(callback: types.CallbackQuery, state: FSMContext):
    event_id = callback.data.split(sep='%')[1]
    event = events.find_one(ObjectId(event_id))

    await AdminEditEvent.event_name.set()
    async with state.proxy() as data:
        data['event_id'] = event_id
        data['callback_data'] = f"admin_event_calendar:event:{event['year']}:{event['month']}:{event['day']}:{event_id}"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='menu'),
                 InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=f"admin_event_calendar:event:{event['year']}:{event['month']}:{event['day']}:{event_id}"))

    await callback.message.edit_text(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event['name']}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", reply_markup=keyboard)


async def event_edit_name_set(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    async with state.proxy() as data:
        event = events.find_one(ObjectId(data['event_id']))
        events.update_one(event, {'$set': {'name': message.text}})
        keyboard.add(InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='menu'),
                     InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=data['callback_data']))
    await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard)

    await send_log(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ[{event['name']}]: –ù–∞–∑–≤–∞–Ω–∏–µ <- {message.text}")


async def event_edit_description(callback: types.CallbackQuery, state: FSMContext):
    event_id = callback.data.split(sep='%')[1]
    event = events.find_one(ObjectId(event_id))

    await AdminEditEvent.event_description.set()
    async with state.proxy() as data:
        data['event_id'] = event_id
        data['callback_data'] = f"admin_event_calendar:event:{event['year']}:{event['month']}:{event['day']}:{event_id}"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='menu'),
                 InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=f"admin_event_calendar:event:{event['year']}:{event['month']}:{event['day']}:{event_id}"))

    await callback.message.edit_text(f"–û–ø–∏—Å–∞–Ω–∏–µ\n {event['description']}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=keyboard)


async def event_edit_description_set(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    async with state.proxy() as data:
        event = events.find_one(ObjectId(data['event_id']))
        events.update_one(event, {'$set': {'description': message.text}})
        keyboard.add(InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='menu'),
                     InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=data['callback_data']))
    await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard)

    await send_log(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ[{event['name']}]: –û–ø–∏—Å–∞–Ω–∏–µ <- {message.text}")


async def event_edit_price(callback: types.CallbackQuery, state: FSMContext):
    event_id = callback.data.split(sep='%')[1]
    event = events.find_one(ObjectId(event_id))

    await AdminEditEvent.event_price.set()
    async with state.proxy() as data:
        data['event_id'] = event_id
        data['callback_data'] = f"admin_event_calendar:event:{event['year']}:{event['month']}:{event['day']}:{event_id}"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='menu'),
                 InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=f"admin_event_calendar:event:{event['year']}:{event['month']}:{event['day']}:{event_id}"))

    await callback.message.edit_text(f"–°—Ç–æ–∏–º–æ—Å—Ç—å\n {event['price']}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥):", reply_markup=keyboard)


async def event_edit_price_set(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    async with state.proxy() as data:
        event = events.find_one(ObjectId(data['event_id']))
        keyboard.add(InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='menu'),
                     InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=data['callback_data']))
        if not re.match(r'^\d+$', message.text):
            await AdminEditEvent.event_price.set()
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥):', reply_markup=keyboard)
            return
    events.update_one(event, {'$set': {'price': int(message.text)}})
    await message.answer('–°—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞', reply_markup=keyboard)

    await send_log(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ[{event['name']}]: –°—Ç–æ–∏–º–æ—Å—Ç—å <- {message.text}")


async def event_edit_services(callback: types.CallbackQuery, state: FSMContext):
    event_id = callback.data.split(sep='%')[1]
    event = events.find_one(ObjectId(event_id))
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å', callback_data=f"event-edit-add-service%{event_id}"))
    await AdminEditEvent.event_services.set()
    async with state.proxy() as data:
        data['callback_data'] = f"admin_event_calendar:event:{event['year']}:{event['month']}:{event['day']}:{event_id}"
        for service, price in zip(event['service_description'], event['service_price']):
            keyboard.add(InlineKeyboardButton(text=f"{service}: {price}", callback_data=f"event-edit-service%{event_id}%{event['service_description'].index(service)}"))

    keyboard.add(InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='menu'),
                 InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=f"admin_event_calendar:event:{event['year']}:{event['month']}:{event['day']}:{event_id}"))

    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


async def event_edit_service_description(callback: types.CallbackQuery, state: FSMContext):
    event_id = callback.data.split(sep='%')[1]
    service_index = callback.data.split(sep='%')[2]

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f"event-delete-service%{event_id}%{service_index}"))
    async with state.proxy() as data:
        keyboard.add(InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='menu'),
                     InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=data['callback_data']))
        data['event_id'] = event_id
        data['service_index'] = service_index

    await AdminEditEvent.event_service_description.set()
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:', reply_markup=keyboard)


async def event_edit_service_description_set(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    async with state.proxy() as data:
        keyboard.add(
            InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f"event-delete-service%{data['event_id']}%{data['service_index']}"))
        keyboard.add(InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='menu'),
                     InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=data['callback_data']))
        events.update_one({'_id': ObjectId(data['event_id'])}, {'$set': {f'service_description.{data["service_index"]}': message.text}})
        await send_log(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ[{data['event_id']}]: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ <- {message.text}")
    await AdminEditEvent.event_service_price.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏:', reply_markup=keyboard)


async def event_edit_service_price_set(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    async with state.proxy() as data:
        keyboard.add(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f"event-delete-service%{data['event_id']}%{data['service_index']}"))
        keyboard.add(InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='menu'),
                     InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=data['callback_data']))
        if not re.match(r'^\d+$', message.text):
            await AdminEditEvent.event_service_price.set()
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏:', reply_markup=keyboard)
            return
        events.update_one({'_id': ObjectId(data['event_id'])}, {'$set': {f'service_price.{data["service_index"]}': message.text}})
        await send_log(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ[{data['event_id']}]: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å <- {message.text}")
    await message.answer('–£—Å–ª—É–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∞', reply_markup=keyboard)


async def event_edit_service_add(callback: types.CallbackQuery, state: FSMContext):
    event_id = callback.data.split(sep='%')[1]
    keyboard = InlineKeyboardMarkup()
    async with state.proxy() as data:
        data['event_id'] = event_id
        keyboard.add(InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='menu'),
                     InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=data['callback_data']))
    await AdminEditEvent.event_new_service_description.set()
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:', reply_markup=keyboard)


async def event_edit_service_add_description(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    async with state.proxy() as data:
        data['service_description'] = message.text
        keyboard.add(InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='menu'),
                     InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=data['callback_data']))
    await AdminEditEvent.event_new_service_price.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏:', reply_markup=keyboard)


async def event_edit_service_add_price(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    async with state.proxy() as data:
        keyboard.add(InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='menu'),
                     InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=data['callback_data']))
        if not re.match(r'^\d+$', message.text):
            await AdminEditEvent.event_new_service_price.set()
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏:', reply_markup=keyboard)
            return
        events.update_one({'_id': ObjectId(data['event_id'])}, {'$push': {'service_description': data['service_description']}})
        events.update_one({'_id': ObjectId(data['event_id'])}, {'$push': {'service_price': message.text}})

        await send_log(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ[{data['event_id']}]: –£—Å–ª—É–≥–∏ <- {data['service_description']}")
    await message.answer('–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=keyboard)


async def event_edit_service_delete(callback: types.CallbackQuery, state: FSMContext):
    event_id = callback.data.split(sep='%')[1]
    service_index = callback.data.split(sep='%')[2]
    event = events.find_one(ObjectId(event_id))
    keyboard = InlineKeyboardMarkup()
    async with state.proxy() as data:
        keyboard.add(InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='menu'),
                     InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=data['callback_data']))
    events.update_one({'_id': ObjectId(event_id)}, {'$pull': {'service_description': event['service_description'][int(service_index)]}})
    events.update_one({'_id': ObjectId(event_id)}, {'$pull': {'service_price': event['service_price'][int(service_index)]}})
    await send_log(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ[{event_id}]: –£—Å–ª—É–≥–∞[{event['service_description'][int(service_index)]}] -> –£–¥–∞–ª–µ–Ω–∞")
    await callback.message.edit_text('–£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞', reply_markup=keyboard)
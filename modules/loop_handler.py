
from datetime import datetime, timedelta
from config import loop, bot, banned_users, wait_registration, admins, referral_link, CHANNEL, CHAT
import asyncio

from database.collection import archive, events, users
from database.models import Archive
from modules.logger import send_log
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


async def spreader():
    loop.create_task(events_to_archive())
    loop.create_task(notification())
    #oop.create_task(check_subscribe())
    while True:
        await send_log('–ë–æ—Ç -> –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á')
        year, month, day, hour = datetime.now().year, datetime.now().month, datetime.now().day, datetime.now().hour
        if hour == 23:
            await send_log('–ë–æ—Ç -> –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á -> –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π')
            loop.create_task(events_to_archive())
            for link in referral_link:
                referral_link.remove(link)
        if hour == 8:
            await send_log('–ë–æ—Ç -> –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á -> –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö')
            #loop.create_task(check_subscribe())
            loop.create_task(notification())
        if day == 22 and hour == 8 or day == 1 and hour == 18:
            await send_log('–ë–æ—Ç -> –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á -> –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫')
            loop.create_task(check_subscribe())
        if day == 23 and hour == 0:
            await send_log('–ë–æ—Ç -> –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á -> –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ -> –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–∞')
            loop.create_task(check_subscribe(True))
        await asyncio.sleep(3600)


async def notification():
    for event in events.find({'public': True}):
        keyboard = InlineKeyboardMarkup()

        now = datetime(datetime.now().year, datetime.now().month, datetime.now().day, 0, 0, 0)
        date = datetime(int(event['year']), int(event['month']), int(event['day']), 0, 0, 0)

        if date - timedelta(days=7) == now:
            await send_log(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ <- —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ <- –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ[{event['name']}]")
            keyboard.add(InlineKeyboardButton(text=f"{event['name']}", callback_data=f"event_calendar:event:{date.year}:{date.month}:{date.day}:{str(event['_id'])}"))
            for user_id in event['users']:
                try:
                    await bot.send_message(user_id, f"üîî –£–≤–∞–∂–∞–µ–º—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n{event['name']}\n\n‚è± –î–æ –Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–ª–∞—Å—å –Ω–µ–¥–µ–ª—è!", reply_markup=keyboard)
                except:
                    pass

        if date - timedelta(days=3) == now:
            await send_log(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ <- —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ <- –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ[{event['name']}]")
            keyboard.add(InlineKeyboardButton(text=f"{event['name']}", callback_data=f"event_calendar:event:{date.year}:{date.month}:{date.day}:{str(event['_id'])}"))
            for user_id in event['users']:
                try:
                    await bot.send_message(user_id, f"üîî –£–≤–∞–∂–∞–µ–º—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n{event['name']}\n\n‚è± –î–æ –Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–ª–æ—Å—å 3 –¥–Ω—è!", reply_markup=keyboard)
                except:
                    pass

        if date - timedelta(days=1) == now:
            await send_log(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ <- —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ <- –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ[{event['name']}]")
            keyboard.add(InlineKeyboardButton(text=f"{event['name']}", callback_data=f"event_calendar:event:{date.year}:{date.month}:{date.day}:{str(event['_id'])}"))
            for user_id in event['users']:
                try:
                    await bot.send_message(user_id, f"üîî –£–≤–∞–∂–∞–µ–º—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n{event['name']}\n\nüéâ –ù–∞—á–∞–ª–æ –∑–∞–≤—Ç—Ä–∞, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ!", reply_markup=keyboard)
                except:
                    pass


async def events_to_archive():
    for event in events.find():
        date = datetime(int(event['year']), int(event['month']), int(event['day']), int(event['hour']), int(event['minute']))
        if date + timedelta(days=event['duration']) == datetime.now():
            if event['public']:
                event_to_archive = Archive(
                    name=event['name'],
                    description=event['description'],
                    year=event['year'],
                    month=event['month'],
                    day=event['day'],
                    users=event['users'],
                    link='')
                archive.insert_one(event_to_archive())
                events.delete_one(event)

                await send_log(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ [{event['name']}] -> –ê—Ä—Ö–∏–≤")
            else:
                events.delete_one(event)

                await send_log(f"–ß–µ—Ä–Ω–æ–≤–∏–∫ [{event['name']}] -> –£–¥–∞–ª–µ–Ω")


async def check_subscribe(banned=False):
    for user in users.find():
        if user['user_id'] in banned_users or user['user_id'] in wait_registration or user['user_id'] in admins:
            continue
        user_id = user['user_id']
        month = user['subscribe']
        if month == 1111:
            continue
        if month - 1 == -1:
            if banned:
                banned_users.add(user_id)
                await send_log(f"–ë–ª–æ–∫–∏—Ä—É—é –¥–æ—Å—Ç—É–ø –∑–∞ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É <- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å[{user_id}]")
                try:
                    await bot.kick_chat_member(CHAT, user_id)
                except:
                    pass
                try:
                    await bot.kick_chat_member(CHANNEL, user_id)
                except:
                    pass
                continue
            else:
                await send_log(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ -> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å[{user_id}]")
                keyboard = InlineKeyboardMarkup(row_width=1)
                keyboard.add(InlineKeyboardButton(text='üé´ –û—Ñ–æ—Ä–º–∏—Ç—å –Ω–∞ 1 –º–µ—Å—è—Ü', callback_data=f"user-subscribe%1"),
                             InlineKeyboardButton(text='üé´ –û—Ñ–æ—Ä–º–∏—Ç—å –Ω–∞ 3 –º–µ—Å—è—Ü–∞', callback_data=f"user-subscribe%3"),
                             InlineKeyboardButton(text='üé´ –û—Ñ–æ—Ä–º–∏—Ç—å –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤', callback_data=f"user-subscribe%6"),
                             InlineKeyboardButton(text='üé´ –û—Ñ–æ—Ä–º–∏—Ç—å –Ω–∞ –≥–æ–¥', callback_data=f"user-subscribe%12"))
                try:
                    await bot.send_message(user_id, 'üòî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:', reply_markup=keyboard)
                except:
                    pass
        else:
            users.update_one(user, {'$set': {'subscribe': month - 1}})



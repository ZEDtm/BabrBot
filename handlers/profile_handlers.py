import logging
import re

from config import bot, admins
from database.collection import find_user, update_full_name, update_company_name, update_company_site, events
from modules.bot_states import Menu, ProfileEdit

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from modules.logger import send_log

logging.basicConfig(level=logging.INFO)


async def profile_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Menu.profile)
    user = find_user(callback.from_user.id)

    keyboard = InlineKeyboardMarkup()

    text = f"üìã –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n\n" \
           f"üë§ –§–ò–û: {user['full_name']}\n" \
           f"üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +{user['phone_number']}\n" \
           f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {user['company_name']}\n"

    text +=f"\nüìã –û–ø–∏—Å–∞–Ω–∏–µ:\n {user['description']}\n"
    events_data = events.find({'users': {'$in': [user['user_id']]}})
    if events_data:
        text += "\nüë§ –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö:\n"
        for event in events_data:
            text += f"- {event['name']}\n"

    if user['company_site']:
        keyboard.add(InlineKeyboardButton(text='üåê –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç', url=user['company_site']))
    if user['video']:
        keyboard.add(InlineKeyboardButton(text='üé¨ –í–∏–¥–µ–æ-–∫–∞—Ä—Ç–æ—á–∫–∞', url=user['video']))
    keyboard.add(InlineKeyboardButton(text='üì¢ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', callback_data='send-report'),
                 InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'))
    image_path = user['image']
    if image_path:
        await bot.send_photo(callback.from_user.id, photo=types.InputFile(image_path))
    await callback.message.answer(text, parse_mode='HTML', reply_markup=keyboard, disable_web_page_preview=True)
    await callback.message.delete()


async def send_report(callback: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'),
                 InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='profile'))
    await callback.message.edit_text("‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è:", reply_markup=keyboard)
    await Menu.send_report.set()


async def send_report_send(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'),
                 InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='profile'))
    user = find_user(message.from_user.id)

    keyboard_admin = InlineKeyboardMarkup()
    keyboard_admin.add(InlineKeyboardButton(text='–û—Ç–≤–µ—Ç–∏—Ç—å', callback_data=f"answer-report%{user['_id']}"))

    for admin in admins:
        try:
            await bot.send_message(admin, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['full_name']}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +{user['phone_number']}\n\n" + message.text, reply_markup=keyboard_admin)
            await send_log(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å[{user['_id']}] -> [–°–æ–æ–±—â–µ–Ω–∏–µ] <- {message.text}")
        except:
            pass

    await message.answer("üó£Ô∏è –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç!", reply_markup=keyboard)
    await Menu.main.set()


async def edit_profile_handler(callback: types.CallbackQuery, state: FSMContext):
    edit = InlineKeyboardMarkup(row_width=1)
    full_name = InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û', callback_data='edit_full_name')
    company_name = InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏', callback_data='edit_company_name')
    company_site = InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏', callback_data='edit_company_site')
    back = InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='menu')
    edit.add(full_name, company_name, company_site, back)

    await callback.message.edit_reply_markup(reply_markup=edit)


async def edit_full_name_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:")
    await ProfileEdit.full_name.set()


async def edit_full_name(message: types.Message, state: FSMContext):
    pattern = r"^[–ê-–Ø][–∞-—è]+\s[–ê-–Ø][–∞-—è]+\s[–ê-–Ø][–∞-—è]+$"
    if not re.match(pattern, message.text):
        await message.answer('–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –§–ò–û.\n –ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á')
        await ProfileEdit.full_name.set()
        return
    update_full_name(message.from_user.id, message.text)
    await state.set_state(Menu.profile)
    user = find_user(message.from_user.id)

    edit = InlineKeyboardMarkup()
    button = InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É', callback_data='edit_profile')
    back = InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='menu')
    edit.add(button)
    edit.add(back)

    await message.answer(f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n"
                         f" –§–ò–û: {user['full_name']}\n"
                         f" –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user['phone_number']}\n"
                         f" –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {user['company_name']}\n"
                         f" –°–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏: <a href='{user['company_site']}'>*–∫–ª–∏–∫*</a>\n",
                         parse_mode='HTML', reply_markup=edit, disable_web_page_preview=True)


async def edit_company_name_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
    await ProfileEdit.company_name.set()


async def edit_company_name(message: types.Message, state: FSMContext):
    update_company_name(message.from_user.id, message.text)
    await state.set_state(Menu.profile)
    user = find_user(message.from_user.id)

    edit = InlineKeyboardMarkup()
    button = InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É', callback_data='edit_profile')
    back = InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='menu')
    edit.add(button)
    edit.add(back)

    await message.answer(f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n"
                         f" –§–ò–û: {user['full_name']}\n"
                         f" –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user['phone_number']}\n"
                         f" –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {user['company_name']}\n"
                         f" –°–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏: <a href='{user['company_site']}'>*–ø–µ—Ä–µ–π—Ç–∏*</a>\n",
                         parse_mode='HTML', reply_markup=edit, disable_web_page_preview=True)


async def edit_company_site_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç:")
    await ProfileEdit.company_site.set()


async def edit_company_site(message: types.Message, state: FSMContext):
    url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
    if not re.match(url_pattern, message.text):
        await message.answer('–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://.')
        await ProfileEdit.company_site.set()
        return
    update_company_site(message.from_user.id, message.text)
    await state.set_state(Menu.profile)
    user = find_user(message.from_user.id)

    edit = InlineKeyboardMarkup()
    button = InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É', callback_data='edit_profile')
    back = InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='menu')
    edit.add(button)
    edit.add(back)

    await message.answer(f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n"
                         f" –§–ò–û: {user['full_name']}\n"
                         f" –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user['phone_number']}\n"
                         f" –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {user['company_name']}\n"
                         f" –°–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏: <a href='{user['company_site']}'>*–ø–µ—Ä–µ–π—Ç–∏*</a>\n",
                         parse_mode='HTML', reply_markup=edit, disable_web_page_preview=True)

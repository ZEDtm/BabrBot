import random
import re
import logging
import string
from datetime import datetime

from bson import ObjectId

from config import LOG_CHAT, bot, wait_registration, admins, DIR, referral_link, CHANNEL, CHAT
from database.collection import users
from database.models import User
from modules.bot_states import Registration

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, \
    KeyboardButton

from modules.logger import send_log


async def registration_full_name(callback: types.CallbackQuery, state):
    if callback.from_user.id not in admins:
        return
    user = callback.data.split(sep='%')[1]
    if int(users.find_one({'_id': ObjectId(user)})['user_id']) not in wait_registration:
        await callback.message.edit_text('üòñ –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω')
        return
    async with state.proxy() as data:
        data['user_db_id'] = user
    await callback.message.answer("‚úè –£–∫–∞–∂–∏—Ç–µ –§–ò–û —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞:")
    await Registration.full_name.set()
    await send_log(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä[{callback.from_user.id}]: –ó–∞—è–≤–∫–∞[{user}] -> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")


async def registration_description(message: types.Message, state: FSMContext):
    pattern = r"^[–ê-–Ø][–∞-—è]+\s[–ê-–Ø][–∞-—è]+\s[–ê-–Ø][–∞-—è]+$"
    if not re.match(pattern, message.text):
        await message.answer('üëé –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –§–ò–û.\n –ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á')
        await Registration.full_name.set()
        return
    async with state.proxy() as data:
        data['full_name'] = message.text
    await Registration.description.set()
    await message.reply("‚úè –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞:")


async def registration_company_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text

    await Registration.company_name.set()
    await message.reply("‚úè –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")


async def registration_company_site(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['company_name'] = message.text

    await Registration.company_site.set()
    keyboard = ReplyKeyboardMarkup()
    keyboard.add(KeyboardButton(text='ü§î –ù–µ—Ç'))
    await message.reply("‚úè –£–∫–∞–∂–∏—Ç–µ —Å–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏:", reply_markup=keyboard)


async def registration_video(message: types.Message, state: FSMContext):
    url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
    if message.text == 'ü§î –ù–µ—Ç':
        async with state.proxy() as data:
            data['company_site'] = ''
    elif not re.match(url_pattern, message.text):
        await message.answer('üëé –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://.')
        await Registration.company_site.set()
        return
    else:
        async with state.proxy() as data:
            data['company_site'] = message.text

    await Registration.video.set()
    keyboard = ReplyKeyboardMarkup()
    keyboard.add(KeyboardButton(text='ü§î –ù–µ—Ç'))
    await message.reply("üé• –î–æ–±–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è:", reply_markup=keyboard)


async def registration_image(message: types.Message, state: FSMContext):
    url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
    if message.text == 'ü§î –ù–µ—Ç':
        async with state.proxy() as data:
            data['video'] = ''
    elif not re.match(url_pattern, message.text):
        await message.answer('üëé –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://.')
        await Registration.video.set()
        return
    else:
        async with state.proxy() as data:
            data['video'] = message.text
    await Registration.image.set()
    keyboard = ReplyKeyboardMarkup()
    keyboard.add(KeyboardButton(text='ü§î –ù–µ—Ç'))
    await message.reply("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è:", reply_markup=keyboard)


async def end_registration_no_image(message: types.Message, state: FSMContext):
    remove_keyboard = types.ReplyKeyboardRemove()
    await bot.send_message(message.from_user.id, 'üòÅ –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã', reply_markup=remove_keyboard)
    async with state.proxy() as data:
        user_db_id = data['user_db_id']
        full_name = data['full_name']
        description = data['description']
        company_name = data['company_name']
        company_site = data['company_site'] if data['company_site'] != '' else None
        video = data['video'] if data['video'] != '' else None
    await state.finish()

    user = users.find_one({'_id': ObjectId(user_db_id)})

    users.update_one(user, {'$set': {'full_name': full_name,
                                     'description': description,
                                     'image': None,
                                     'company_name': company_name,
                                     'company_site': company_site,
                                     'video': video}})

    keyboard = InlineKeyboardMarkup()
    admin = InlineKeyboardMarkup()

    wait_registration.discard(user['user_id'])
    try:
        link_channel = await bot.export_chat_invite_link(CHANNEL)
        link_chat = await bot.export_chat_invite_link(CHAT)
        keyboard.add(InlineKeyboardButton(text='üì£ –ù–∞—à –∫–∞–Ω–∞–ª', url=link_channel))
        keyboard.add(InlineKeyboardButton(text='üí¨ –ù–∞—à —á–∞—Ç', url=link_chat))
        keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'))
        await bot.send_message(user['user_id'], 'üòÅ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!', reply_markup=keyboard)
    except:
        admin.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'))
        await message.answer('üòñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞')
    await message.answer("üòÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=admin)

    await send_log(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä[{message.from_user.id}]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å[{user['user_id']}] -> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")


async def end_registration(message: types.Message, state: FSMContext):
    remove_keyboard = types.ReplyKeyboardRemove()
    await bot.send_message(message.from_user.id, 'üòÅ –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã', reply_markup=remove_keyboard)
    photo_sizes = message.photo
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    last_photo = photo_sizes[-1]
    async with state.proxy() as data:
        user_db_id = data['user_db_id']
        user = users.find_one({'_id': ObjectId(user_db_id)})

        file = await bot.get_file(last_photo.file_id)
        file_name = f'{last_photo.file_id}.jpg'
        await bot.download_file(file.file_path, destination=f"{DIR}/users/{user['user_id']}/{file_name}")
        image = f"{DIR}/users/{user['user_id']}/{file_name}"

        full_name = data['full_name']
        description = data['description']
        company_name = data['company_name']
        company_site = data['company_site'] if data['company_site'] != '' else None
        video = data['video'] if data['video'] != '' else None
    await state.finish()

    users.update_one(user, {'$set': {'full_name': full_name,
                                     'description': description,
                                     'image': image,
                                     'company_name': company_name,
                                     'company_site': company_site,
                                     'video': video}})

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text='üè† –í –º–µ–Ω—é', callback_data='menu'))

    wait_registration.discard(user['user_id'])
    try:
        await bot.send_message(user['user_id'], 'üòÅ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!', reply_markup=keyboard)
    except:
        await message.answer('üòñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞')
    await message.answer("üòÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=keyboard)

    await send_log(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä[{message.from_user.id}]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å[{user['user_id']}] -> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")


async def new_admin(callback: types.CallbackQuery, state: FSMContext):
    letters = string.ascii_lowercase
    rand_string = ''.join(random.choice(letters) for i in range(20))
    referral_link.add(rand_string)
    link = f"https://t.me/{callback.message.from_user.username}?start={rand_string}"
    text = f"ü§î –í—ã —Å–æ–∑–¥–∞–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n" \
           f"{link}\n\n" \
           f"ü§´ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –µ–µ –≤ —á–∞—Ç—ã –∏ –Ω–µ–∑–Ω–∞–∫–æ–º—ã–º –ª—é–¥—è–º!\nüõé –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑!"
    await callback.message.answer(text)

    await send_log(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä[{callback.from_user.id}]: –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ <- –°—Å—ã–ª–∫–∞")